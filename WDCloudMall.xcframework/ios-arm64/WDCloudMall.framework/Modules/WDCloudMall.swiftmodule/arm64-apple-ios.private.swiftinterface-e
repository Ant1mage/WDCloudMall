// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WDCloudMall
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreGraphics
import CoreImage
import CryptoSwift
import Foundation
import Masonry
import Swift
import UIKit.UIGeometry
import UIKit
@_exported import WDCloudMall
import WebKit
import _Concurrency
import _StringProcessing
public enum ActiveType {
  case mention
  case hashtag
  case url
  case email
  case custom(pattern: Swift.String)
}
extension WDCloudMall.ActiveType : Swift.Hashable, Swift.Equatable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: WDCloudMall.ActiveType, rhs: WDCloudMall.ActiveType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.String {
  @inlinable internal var isNotEmpty: Swift.Bool {
    get {
            return !isEmpty
        }
  }
}
extension UIKit.UIApplication {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var keyWindowInConnectedScenes: UIKit.UIWindow? {
    @objc get
  }
}
@objc public protocol WDCMNoticeDelegate : ObjectiveC.NSObjectProtocol {
  @objc func wdcmNoticeLogin(_ view: WDCloudMall.WDCloudMallContainer)
  @objc func wdcmNoticeLogout(_ view: WDCloudMall.WDCloudMallContainer)
  @objc func wdcmNoticeShare(_ view: WDCloudMall.WDCloudMallContainer, parameters: [Swift.String : Any]?)
  @objc func wdcmNoticeOpenURL(_ url: Foundation.URL)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class WDCloudMall : ObjectiveC.NSObject {
  @objc public static let shared: WDCloudMall.WDCloudMall
  @objc weak public var notice: WDCloudMall.WDCMNoticeDelegate?
  @objc deinit
}
extension WDCloudMall.WDCloudMall {
  @objc dynamic public func register(config: WDCloudMall.WDCloudMallConfig)
  @objc dynamic public func createContainer() -> WDCloudMall.WDCloudMallContainer
}
extension WDCloudMall.WDCloudMall {
  @objc dynamic public func login(user: WDCloudMall.WDCloudMallUserModel, complete: @escaping (WDCloudMall.WDCMResponse) -> ())
  @objc dynamic public func logout(user: WDCloudMall.WDCloudMallUserModel, complete: @escaping (WDCloudMall.WDCMResponse) -> ())
}
@objc public class WDCloudMallConfig : ObjectiveC.NSObject {
  @objc public init(appKey: Swift.String, wxConfig: WDCloudMall.WDCloudMallWXConfig)
  @objc public init(appKey: Swift.String)
  @objc deinit
}
@objc public class WDCloudMallWXConfig : ObjectiveC.NSObject {
  @objc public init(appId: Swift.String, universalLink: Swift.String)
  @objc deinit
}
@objc public protocol WDCloudMallWebViewSettings {
  @objc var url: Foundation.URL? { get }
  @objc var canGoBack: Swift.Bool { get }
  @objc var canGoForward: Swift.Bool { get }
  @objc var loading: Swift.Bool { get }
  @objc var title: Swift.String { get set }
  @objc func goBack()
  @objc func goForward()
  @objc func stopLoading()
  @objc func loadRequest(url: Swift.String)
  @objc func loadUrlWithFastAuth(userId: Swift.String, targetUrl: Swift.String, loadingUrl: Swift.String?, complete: @escaping (Swift.Bool, Swift.String) -> Swift.Void)
  @objc func reload()
  @objc func callJS(data: [Swift.String : Any], complete: @escaping ([Swift.AnyHashable : Any]?, Swift.Error?) -> Swift.Void)
}
@objc public protocol WDCMContainerDelegate {
  @objc func wdcmContainerWillStartLoad(_ view: WDCloudMall.WDCloudMallContainer)
  @objc func wdcmContainerDidStartLoad(_ view: WDCloudMall.WDCloudMallContainer)
  @objc func wdcmContainerDidFinishLoad(_ view: WDCloudMall.WDCloudMallContainer)
  @objc func wdcmContainerDidFailLoadWithError(_ view: WDCloudMall.WDCloudMallContainer, error: Swift.Error)
  @objc func wdcmContainerUpdateTitle(_ view: WDCloudMall.WDCloudMallContainer, title: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class WDCloudMallContainer : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: WDCloudMall.WDCMContainerDelegate?
  @objc deinit
}
extension WDCloudMall.WDCloudMallContainer : WDCloudMall.WDCloudMallWebViewSettings {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var url: Foundation.URL? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var canGoBack: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var canGoForward: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var loading: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var title: Swift.String {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public func goBack()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func goForward()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func stopLoading()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func loadRequest(url: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func loadUrlWithFastAuth(userId: Swift.String, targetUrl: Swift.String, loadingUrl: Swift.String?, complete: @escaping (Swift.Bool, Swift.String) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func reload()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func callJS(data: [Swift.String : Any], complete: @escaping ([Swift.AnyHashable : Any]?, Swift.Error?) -> Swift.Void)
}
@objc public class WDCloudMallUserModel : ObjectiveC.NSObject {
  @objc public var userId: Swift.String
  @objc public init(userId: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class WDCMResponse : ObjectiveC.NSObject {
  @objc public var code: Swift.Int
  @objc public var message: Swift.String
  @objc public var data: [Swift.String : Any]
  @objc public func toString() -> Swift.String
  @objc public func toMap() -> [Swift.String : Any]
  @objc deinit
}
