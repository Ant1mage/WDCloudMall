// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WDCloudMall
import CoreGraphics
import CoreImage
import CryptoSwift
import Foundation
import SnapKit
import Swift
import UIKit.UIGeometry
import UIKit
@_exported import WDCloudMall
import WebKit
import _Concurrency
@objc public class WDCMUserModel : ObjectiveC.NSObject {
  @objc public var userId: Swift.String
  @objc public init(userId: Swift.String)
  @objc deinit
}
@objc public protocol WDCMNoticeDelegate {
  @objc func wdcmNoticeLogin(_ view: WDCloudMallContainer)
  @objc func wdcmNoticeLogout(_ view: WDCloudMallContainer)
  @objc func wdcmNoticeShare(_ view: WDCloudMallContainer, parameters: [Swift.String : Any]?)
  @objc func wdcmNoticeOpenURL(_ url: Foundation.URL)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class WDCloudMall : ObjectiveC.NSObject {
  @objc public static let shared: WDCloudMall
  @objc weak public var notice: WDCMNoticeDelegate?
  @objc deinit
}
extension WDCloudMall {
  @objc dynamic public func register(config: WDCloudMallConfig)
  @objc dynamic public func createContainer() -> WDCloudMallContainer
}
extension WDCloudMall {
  @objc dynamic public func login(user: WDCMUserModel, complete: @escaping (WDCMResponse) -> ())
  @objc dynamic public func logout(user: WDCMUserModel, complete: @escaping (WDCMResponse) -> ())
}
@objc public class WDCloudMallConfig : ObjectiveC.NSObject {
  @objc public init(appKey: Swift.String)
  @objc deinit
}
@objc public protocol WDCloudMallWebViewSettings {
  @objc var url: Foundation.URL? { get }
  @objc var canGoBack: Swift.Bool { get }
  @objc var canGoForward: Swift.Bool { get }
  @objc var loading: Swift.Bool { get }
  @objc var title: Swift.String { get set }
  @objc func goBack()
  @objc func goForward()
  @objc func stopLoading()
  @objc func loadRequest(url: Swift.String)
  @objc func reload()
  @objc func callJS(data: [Swift.String : Any], complete: @escaping ([Swift.AnyHashable : Any]?, Swift.Error?) -> Swift.Void)
}
@objc public protocol WDCMContainerDelegate {
  @objc func wdcmContainerWillStartLoad(_ view: WDCloudMallContainer)
  @objc func wdcmContainerDidStartLoad(_ view: WDCloudMallContainer)
  @objc func wdcmContainerDidFinishLoad(_ view: WDCloudMallContainer)
  @objc func wdcmContainerDidFailLoadWithError(_ view: WDCloudMallContainer, error: Swift.Error)
  @objc func wdcmContainerUpdateTitle(_ view: WDCloudMallContainer, title: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class WDCloudMallContainer : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: WDCMContainerDelegate?
  @objc deinit
}
extension WDCloudMallContainer : WDCloudMallWebViewSettings {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var url: Foundation.URL? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var canGoBack: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var canGoForward: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var loading: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var title: Swift.String {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public func goBack()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func goForward()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func stopLoading()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func loadRequest(url: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func reload()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func callJS(data: [Swift.String : Any], complete: @escaping ([Swift.AnyHashable : Any]?, Swift.Error?) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objc public class WDCMResponse : ObjectiveC.NSObject {
  @objc public var code: Swift.Int
  @objc public var message: Swift.String
  @objc public var data: [Swift.String : Any]
  @objc public func toString() -> Swift.String
  @objc public func toMap() -> [Swift.String : Any]
  @objc deinit
}
