// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WDCloudMall
import CoreGraphics
import CoreImage
import CryptoSwift
import Foundation
import SnapKit
import Swift
import UIKit.UIGeometry
import UIKit
@_exported import WDCloudMall
import WebKit
@objc public class WDCMUserModel : ObjectiveC.NSObject {
  @objc public var userId: Swift.String
  @objc public init(userId: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol WDCMNoticeDelegate {
  @objc func wdcmNoticeLogin(_ view: WDCloudMall.WDCloudMallContainer)
  @objc func wdcmNoticeLogout(_ view: WDCloudMall.WDCloudMallContainer)
  @objc func wdcmNoticeShare(_ view: WDCloudMall.WDCloudMallContainer, parameters: [Swift.String : Any]?)
  @objc func wdcmNoticeOpenURL(_ url: Foundation.URL)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class WDCloudMall : ObjectiveC.NSObject {
  @objc public static let shared: WDCloudMall.WDCloudMall
  @objc weak public var notice: WDCloudMall.WDCMNoticeDelegate?
  @objc deinit
}
extension WDCloudMall {
  @objc dynamic public func register(config: WDCloudMall.WDCloudMallConfig)
  @objc dynamic public func createContainer() -> WDCloudMall.WDCloudMallContainer
}
extension WDCloudMall {
  @objc dynamic public func login(user: WDCloudMall.WDCMUserModel, complete: @escaping (WDCloudMall.WDCMResponse) -> ())
  @objc dynamic public func logout(user: WDCloudMall.WDCMUserModel, complete: @escaping (WDCloudMall.WDCMResponse) -> ())
}
@objc public class WDCloudMallConfig : ObjectiveC.NSObject {
  @objc public init(appKey: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol WDCloudMallWebViewSettings {
  @objc var url: Foundation.URL? { get }
  @objc var canGoBack: Swift.Bool { get }
  @objc var canGoForward: Swift.Bool { get }
  @objc var loading: Swift.Bool { get }
  @objc var title: Swift.String { get set }
  @objc func goBack()
  @objc func goForward()
  @objc func stopLoading()
  @objc func loadRequest(url: Swift.String)
  @objc func reload()
  @objc func callJS(data: [Swift.String : Any], complete: @escaping ([Swift.AnyHashable : Any]?, Swift.Error?) -> Swift.Void)
}
public protocol ActiveLabelDelegate : AnyObject {
  func didSelect(_ text: Swift.String, type: WDCloudMall.ActiveType)
}
public typealias ConfigureLinkAttribute = (WDCloudMall.ActiveType, [Foundation.NSAttributedString.Key : Any], Swift.Bool) -> ([Foundation.NSAttributedString.Key : Any])
@objc @_inheritsConvenienceInitializers @IBDesignable open class ActiveLabel : UIKit.UILabel {
  weak open var delegate: WDCloudMall.ActiveLabelDelegate?
  open var enabledTypes: [WDCloudMall.ActiveType]
  open var urlMaximumLength: Swift.Int?
  open var configureLinkAttribute: WDCloudMall.ConfigureLinkAttribute?
  @objc @IBInspectable open var mentionColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var mentionSelectedColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var hashtagColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var hashtagSelectedColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var URLColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var URLSelectedColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  open var customColor: [WDCloudMall.ActiveType : UIKit.UIColor] {
    get
    set
  }
  open var customSelectedColor: [WDCloudMall.ActiveType : UIKit.UIColor] {
    get
    set
  }
  @objc @IBInspectable public var lineSpacing: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var minimumLineHeight: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var highlightFontName: Swift.String? {
    @objc get
    @objc set
  }
  public var highlightFontSize: CoreGraphics.CGFloat? {
    get
    set
  }
  open func handleMentionTap(_ handler: @escaping (Swift.String) -> ())
  open func handleHashtagTap(_ handler: @escaping (Swift.String) -> ())
  open func handleURLTap(_ handler: @escaping (Foundation.URL) -> ())
  open func handleCustomTap(for type: WDCloudMall.ActiveType, handler: @escaping (Swift.String) -> ())
  open func handleEmailTap(_ handler: @escaping (Swift.String) -> ())
  open func removeHandle(for type: WDCloudMall.ActiveType)
  open func filterMention(_ predicate: @escaping (Swift.String) -> Swift.Bool)
  open func filterHashtag(_ predicate: @escaping (Swift.String) -> Swift.Bool)
  @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc override dynamic open var attributedText: Foundation.NSAttributedString? {
    @objc get
    @objc set
  }
  @objc override dynamic open var font: UIKit.UIFont! {
    @objc get
    @objc set
  }
  @objc override dynamic open var textColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc override dynamic open var textAlignment: UIKit.NSTextAlignment {
    @objc get
    @objc set
  }
  @objc override dynamic open var numberOfLines: Swift.Int {
    @objc get
    @objc set
  }
  @objc override dynamic open var lineBreakMode: UIKit.NSLineBreakMode {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func awakeFromNib()
  @objc override dynamic open func drawText(in rect: CoreGraphics.CGRect)
  @discardableResult
  open func customize(_ block: (WDCloudMall.ActiveLabel) -> ()) -> WDCloudMall.ActiveLabel
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
}
extension ActiveLabel : UIKit.UIGestureRecognizerDelegate {
  @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRequireFailureOf otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldBeRequiredToFailBy otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
@objc public protocol WDCMContainerDelegate {
  @objc func wdcmContainerWillStartLoad(_ view: WDCloudMall.WDCloudMallContainer)
  @objc func wdcmContainerDidStartLoad(_ view: WDCloudMall.WDCloudMallContainer)
  @objc func wdcmContainerDidFinishLoad(_ view: WDCloudMall.WDCloudMallContainer)
  @objc func wdcmContainerDidFailLoadWithError(_ view: WDCloudMall.WDCloudMallContainer, error: Swift.Error)
  @objc func wdcmContainerUpdateTitle(_ view: WDCloudMall.WDCloudMallContainer, title: Swift.String)
}
@objc @_hasMissingDesignatedInitializers public class WDCloudMallContainer : UIKit.UIView {
  @objc weak public var delegate: WDCloudMall.WDCMContainerDelegate?
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
extension WDCloudMallContainer : WDCloudMall.WDCloudMallWebViewSettings {
  @objc dynamic public var url: Foundation.URL? {
    @objc get
  }
  @objc dynamic public var canGoBack: Swift.Bool {
    @objc get
  }
  @objc dynamic public var canGoForward: Swift.Bool {
    @objc get
  }
  @objc dynamic public var loading: Swift.Bool {
    @objc get
  }
  @objc dynamic public var title: Swift.String {
    @objc get
    @objc set
  }
  @objc dynamic public func goBack()
  @objc dynamic public func goForward()
  @objc dynamic public func stopLoading()
  @objc dynamic public func loadRequest(url: Swift.String)
  @objc dynamic public func reload()
  @objc dynamic public func callJS(data: [Swift.String : Any], complete: @escaping ([Swift.AnyHashable : Any]?, Swift.Error?) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objc public class WDCMResponse : ObjectiveC.NSObject {
  @objc public var code: Swift.Int
  @objc public var message: Swift.String
  @objc public var data: [Swift.String : Any]
  @objc public func toString() -> Swift.String
  @objc public func toMap() -> [Swift.String : Any]
  @objc override dynamic public init()
  @objc deinit
}
public enum ActiveType {
  case mention
  case hashtag
  case url
  case email
  case custom(pattern: Swift.String)
}
extension ActiveType : Swift.Hashable, Swift.Equatable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func == (lhs: WDCloudMall.ActiveType, rhs: WDCloudMall.ActiveType) -> Swift.Bool
extension UIColor {
}
